/*
==============================================================================

  This file was auto-generated by the Introjucer!

  It contains the basic startup code for a Juce application.

==============================================================================
*/

#ifndef __PLUGINEDITOR_H_3BD4AE6E__
#define __PLUGINEDITOR_H_3BD4AE6E__

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"
#include "gui/pitcheddelaytab.h"
#include "gui/DelayGraph.h"

class PitchedDelayLookAndFeel : public LookAndFeel
{
public:
	PitchedDelayLookAndFeel()
	{
		setColour(Slider::thumbColourId, Colours::lightgrey);

		setColour(TextButton::buttonColourId, Colours::lightgrey);
		setColour(TextButton::buttonOnColourId, Colours::grey);

		setColour(ComboBox::buttonColourId, Colours::lightgrey);

		setColour(TextEditor::focusedOutlineColourId, Colours::transparentBlack);
		setColour(TextEditor::highlightColourId, Colours::darkgrey.withAlpha(0.25f));
	}

private:

};




//==============================================================================
/**
*/
class CallbackTab : public TabbedComponent
{
public:
	CallbackTab(TabbedButtonBar::Orientation orientation, PitchedDelayAudioProcessor* processor_)
		: TabbedComponent(orientation),
		  processor(processor_)
	{
	}

	void currentTabChanged(int newCurrentTabIndex, const String& /*newCurrentTabName*/)
	{
		processor->currentTab = newCurrentTabIndex;
	}

private:
	PitchedDelayAudioProcessor* processor;
};


class PitchedDelayAudioProcessorEditor  : public AudioProcessorEditor,
																					public Timer,
																					public ActionListener,
																					public Slider::Listener,
																					public Button::Listener
{
public:
  PitchedDelayAudioProcessorEditor (PitchedDelayAudioProcessor* ownerFilter);
  ~PitchedDelayAudioProcessorEditor();

  //==============================================================================
  // This is just a standard Juce paint method...
  void paint (Graphics& g);
	void resized();

	void timerCallback();
  void actionListenerCallback (const String& message);
	void sliderValueChanged (Slider* slider);
	void buttonClicked (Button* button);


private:

	PitchedDelayAudioProcessor* getProcessor()
	{
		return static_cast<PitchedDelayAudioProcessor*> (getAudioProcessor());
	}


	CallbackTab tabs;
	OwnedArray<PitchedDelayTab> delays;

	ScopedPointer<DelayGraph> graph;

	Slider dryVolume;
	Slider masterVolume;
	ToggleButton showTooltips;

	PitchedDelayLookAndFeel lookAndFeel;

	ScopedPointer<TooltipWindow> tooltipWindow;

};


#endif  // __PLUGINEDITOR_H_3BD4AE6E__
